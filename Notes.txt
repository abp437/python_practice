PEP 8 is the style guide for coding conventions in Python.

PyPI - Python Package Index is the Python equivalent of Node Package Manager(npm) for NodeJS. It contains the list of all the published packages in Python. The packages listed in PyPI can be considered as Third Party Packages developed by other developers for our usage. Some examples of packages are `numpy`, `pandas`. Any package can be installed, uninstalled using `pip`.
`pip` is the package installer for Python. It comes built in along with Python 3.

Difference between Packages and Modules:
'Module' is a file in Python which contains a collection of functions. In Python there's no concept of public and private functions in modules. All functions are public.

'Package' is a collection of modules. All the files in a package are typically placed in a single folder. The identifier of the package is `__init__.py` file from where the package initialization starts. This `__init__.py` file distinguishes a package from a regular directory. It doesn't matter even if the file is empty, it just needs to be there for distinction.

`if __name__ == '__main__':` code meaning:
The purpose of this code is to provide a way to test or execute certain code only when the script file is run directly via terminal, and not when it is imported into another module. This is useful for code organization and testing.
Example: `python3 calc_hours.py`
When we do this the above code in `calc_hours.py` file is invoked, but if it's imported as a script like `import calc_hours` it's not invoked.

OOP:
It basically answers two questions.
What information does an object have? and What actions can an object perform?
The convention is to have `CamelCased` class names and `snake_cased` file names for those classes.
Just like Ruby everything in Python is an Object.

Constructor function and `self` keyword:
  All classes must have an `__init__` function in it. That function is the constructor function of the class. The `self` parameter in the function is a reference to the current instance(object) of the class. It must be included as a parameter in every instance method of the class.

Keyword Arguments (**kwargs):
  It serves a similar purpose of variadic arguments in Golang. However, unlike Golang, in Keyword args, the args have to be named arguments. Thus, we can pass in named arguments to a function which supports it. The order in which the arguments are provided doesn't matter because those are named.
  It can be used in functions which can have a large amount of arguments, such as constructor functions.
  Inside the function, these arguments are available as a dictionary where the keys are the argument names, and the values are the corresponding values.
  It thus avoids the need to pass in arguments in the form of a dictionary to the function. Because it ain't the convention, instead we pass in keyword args.

  Example:
    def describe_person(name, **kwargs):
      print(f"Name: {name}")
      for key, value in kwargs.items():
          print(f"{key}: {value}")

    # Usage
    describe_person("Alice", age=30, country="USA", occupation="Engineer")

Getters, Setters & Decorators:
There's no explicit concept of getters and setters in Python classes because we can literally get and set values of a class object like we get and set values in a dictionary. So, we don't need to write any getters or setters.
However, this approach might make our code vulnerable to unpredictable behaviors. Thus to apply validations on our setter functions we have the concept of `Property Decorators`
Refer `oops/user.py` for the detailed implementation & documentation.

Public, Protected and Private access:
In Python, there are no explicit `private` or `protected` keywords like in some other object-oriented languages (such as private and protected in Ruby, Java or C++). Python's approach emphasizes readability and programmer responsibility over strict enforcement of access control. Instead, Python uses naming conventions to indicate the intended visibility of class attributes and methods:

  Public:
    Attributes and methods without any leading underscores are considered public and can be accessed from outside the class.

  Protected:
    Attributes and methods with a single leading underscore (e.g., _attribute) are meant to be protected. This is a convention indicating that these members are intended for internal use within the class or its subclasses and should not be accessed directly from outside the class. However, it's just a convention and doesn't enforce access control.

  Private:
    Attributes and methods with double leading underscores (e.g., __attribute) are intended to be private to the class. This triggers name mangling, where the interpreter changes the name of the attribute to include the class name, which helps avoid accidental name collisions in subclasses. However, this does not completely prevent access but makes it more challenging.

  Example Class with public, private and protected access:
  class Example:
    def __init__(self):
      self.public_attr = "I am public"
      self._protected_attr = "I am protected"
      self.__private_attr = "I am private"

    def public_method(self):
      return "This is a public method"

    def _protected_method(self):
      return "This is a protected method"

    def __private_method(self):
      return "This is a private method"

  # Usage
  obj = Example()

  print(obj.public_attr)  # Works
  print(obj._protected_attr)  # Works but should be avoided
  # print(obj.__private_attr)  # AttributeError

  print(obj.public_method())  # Works
  print(obj._protected_method())  # Works but should be avoided
  # print(obj.__private_method())  # AttributeError

  In this example:
  `public_attr` and `public_method` are accessible from outside the class.
  `_protected_attr` and `_protected_method` are intended to be protected and should not be accessed directly, though they can be.
  `__private_attr` and `__private_method` are intended to be private and are name-mangled to prevent easy access from outside the class.
  There's a caveat over here though. Private attributes and methods are still accessible, but you would have to use the mangled name (e.g., _Example__private_attr) to access them.

Is attribute and method accessor approach of Python a Design Flaw?
No. Python's approach to access control is intentional and reflects its design philosophy, which prioritizes simplicity, readability and explicitness. This design choice is rooted in several principles:
  "We're All Adults Here" Philosophy:
  Python's creator, Guido van Rossum, has often emphasized the philosophy that programmers should be trusted to follow conventions rather than relying on enforced rules. The idea is that developers should respect the intended use of attributes and methods rather than relying on enforced privacy.

  Duck Typing and Emphasis on Behavior:
  Python emphasizes duck typing and the behavior of objects rather than rigid class hierarchies and access controls. This aligns with Python's broader design philosophy, which values flexibility and adaptability.

  Explicit is Better Than Implicit:
  Python's design follows the principle that code should be explicit about its intentions. The naming conventions for access control (such as leading underscores) are clear indicators of how attributes and methods are intended to be used, without enforcing strict access restrictions.

While it might seem the lack of enforced access control as a flaw, it's generally seen as a design choice that aligns with Python’s core values. The approach is meant to foster a culture of trust and responsibility among developers rather than imposing strict rules. This philosophy has contributed to Python's popularity and ease of use, making it a widely adopted language for many types of projects.

`pass` keyword:
The `pass` keyword in Python is essentially a placeholder that does nothing. It’s used when a statement is syntactically required but you don’t want to execute any code. When you use pass in a class’s `__init__` method, it means that the method doesn’t perform any actions—it’s an empty implementation.
  Example:
  class FutureClass:
    def method_to_implement(self):
      pass  # Will be implemented later

  The situation to use the pass keyword arises when:
  - A code is to be implemented in the future
  - Some methods inside a class which explicitly needs to be in place just to meet the requirements to make the code work.
    Example: In abstract base classes or interfaces, `pass` can be used to define methods that subclasses are expected to implement or `__init__` methods in classes.

Multiple Inheritance model:
Unlike Ruby, which only supports single inheritance but allows mixins via modules, Python supports both single and multiple inheritance. Python allows a class to inherit from multiple parent classes. This means you can create a class that inherits attributes and methods from more than one base class.

  Example:
    class Base1:
      def method1(self):
        print("Method from Base1")

    class Base2:
      def method2(self):
        print("Method from Base2")

    class Derived(Base1, Base2):
      pass

    d = Derived()
    d.method1()  # Output: Method from Base1
    d.method2()  # Output: Method from Base2

In this example, the `Derived` class inherits from both `Base1` and `Base2`, allowing it to use methods from both base classes. Python’s method resolution order (MRO) determines the order in which base classes are searched when looking for a method. This is an important aspect to consider when using multiple inheritance, as it helps avoid issues related to the "diamond problem" often encountered in multiple inheritance scenarios.

So, to summarize: Python supports multiple inheritance, giving you more flexibility in designing class hierarchies compared to Ruby’s single inheritance model.

Magic/Dunder methods - Built-in method overriding:
Magic Methods and Dunder(Double Underscore) Methods are just two terms for the same set of special methods that have double underscores before and after their names. They are specifically used to override the default behavior of the built-in methods provided by Python. They are used to define the behavior of objects in various contexts.

Examples:
  __init__: Constructor method that initializes a new instance of a class.
  __str__: Returns a human-readable string representation of an object. Equivalent of Ruby's `to_s` method applied on an object.
  __add__: Defines and overrides the default behavior for the addition operator `+` when used with instances of the class. It requires two objects to be in place for this operator.

  Usage:
  class MyClass:
    def __str__(self):
      return f"MyClass with value {self.value}"

MetaClasses:
By default we don't have function overlaoding in Python, but by the usage of Python MetaClasses, we can achieve it.

  Metaclasses:
  Control the creation and behavior of classes themselves. They are a more advanced feature used for customizing class definitions and behavior.

  Abstract Classes:
  Define an interface with some methods that must be implemented by any concrete subclass. They help establish a contract for subclasses to follow.

  Data Classes:
  Simplify the creation of classes that are primarily used for storing data, automatically generating common methods to reduce boilerplate code.

Type Hints & `mypy` package for Type Checking:
Python by default doesn't enforce strict type checking on variable assignments. Even when we specify the types in code about the variables, return types, etc. Python doesn't enforce strict type checking because of the principle of `We're all adults here.` So, specifying type hints like `bool` in the code is primarily for documentation and tooling purposes. Type hints help developers understand what type of values are expected in variables, function parameters, and return values. So, the below code gives no errors at runtime.
Sample Code:
  def main():
    has_money: bool = 23
    has_money = 53
    print(has_money)

  if __name__ == "__main__":
    main()

But we as developers can enforce Type Checking if we want using the `mypy` package.
`mypy ./your_source_file.py --check-untyped-defs`.
It gives errors on it. But it too just gives errors on the console. It also doesn't enforce type checking on run time.
